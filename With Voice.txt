import os
import csv
import time
import queue
import threading
from datetime import datetime
import tensorflow as tf
from tensorflow.keras.models import load_model
import cv2
import numpy as np
import pyttsx3

# ======================
# CONFIGURATION
# ======================
os.environ['TF_CPP_MIN_LOG_LEVEL'] = '2'  # Suppress TensorFlow logs
os.environ['OMP_NUM_THREADS'] = '4'       # Limit CPU threads
np.set_printoptions(suppress=True)

# ======================
# SYSTEM INITIALIZATION
# ======================
# Initialize text-to-speech engine
engine = pyttsx3.init()
engine.setProperty('rate', 150)

# Voice queue for async processing
voice_queue = queue.Queue()
def voice_worker():
    while True:
        text = voice_queue.get()
        engine.say(text)
        engine.runAndWait()
        voice_queue.task_done()
threading.Thread(target=voice_worker, daemon=True).start()

# Initialize output directory
output_dir = "detection_results"
os.makedirs(output_dir, exist_ok=True)

# Initialize CSV file (single handle for performance)
csv_file = os.path.join(output_dir, "detections.csv")
csv_exists = os.path.exists(csv_file)
csv_file_handle = open(csv_file, 'a', newline='')
csv_writer = csv.writer(csv_file_handle)
if not csv_exists:
    csv_writer.writerow(["Timestamp", "Frame", "Class", "Confidence", "Resolution"])

# Initialize text log
log_file = os.path.join(output_dir, "detections_log.txt")
with open(log_file, 'a') as f:
    f.write(f"\n\n=== New Session {datetime.now().strftime('%Y-%m-%d %H:%M:%S')} ===\n")

# ======================
# MODEL SETUP
# ======================
# Load model with optimizations
tf.config.threading.set_inter_op_parallelism_threads(4)
tf.config.threading.set_intra_op_parallelism_threads(4)
model = load_model("keras_Model.h5", compile=False)
model.predict(np.zeros((1, 224, 224, 3)))  # Warm-up model

# Load class labels
class_names = [line.strip() for line in open("labels.txt", "r").readlines()]

# Shape mapping
sign_shapes = {
    "stop": "octagon",
    "speed": "circle",
    "yield": "triangle",
    "warning": "triangle",
    "no entry": "circle",
    "pedestrian": "square",
}

# ======================
# VISION FUNCTIONS
# ======================
def draw_shape(frame, shape, center, size, color=(0, 255, 0), thickness=2):
    """Optimized shape drawing"""
    if shape == "circle":
        cv2.circle(frame, center, size, color, thickness)
    elif shape == "triangle":
        pts = np.array([
            [center[0], center[1]-size],
            [center[0]-size, center[1]+size],
            [center[0]+size, center[1]+size]
        ], dtype=np.int32)
        cv2.polylines(frame, [pts], isClosed=True, color=color, thickness=thickness)
    elif shape == "octagon":
        pts = np.array([
            [center[0]+int(size*0.7), center[1]-int(size*0.3)],
            [center[0]+int(size*0.3), center[1]-int(size*0.7)],
            [center[0]-int(size*0.3), center[1]-int(size*0.7)],
            [center[0]-int(size*0.7), center[1]-int(size*0.3)],
            [center[0]-int(size*0.7), center[1]+int(size*0.3)],
            [center[0]-int(size*0.3), center[1]+int(size*0.7)],
            [center[0]+int(size*0.3), center[1]+int(size*0.7)],
            [center[0]+int(size*0.7), center[1]+int(size*0.3)]
        ], dtype=np.int32)
        cv2.polylines(frame, [pts], isClosed=True, color=color, thickness=thickness)
    else:
        cv2.rectangle(frame, 
                     (center[0]-size, center[1]-size),
                     (center[0]+size, center[1]+size), 
                     color, thickness)

# ======================
# MAIN PROCESSING LOOP
# ======================
# Initialize camera with reduced resolution
camera = cv2.VideoCapture(0)
camera.set(cv2.CAP_PROP_FRAME_WIDTH, 640)
camera.set(cv2.CAP_PROP_FRAME_HEIGHT, 480)

last_alert_time = time.time()
frame_count = 0
detection_buffer = []
frame_skip = 0  # For frame skipping

try:
    while True:
        # Frame skipping for performance
        frame_skip += 1
        ret, frame = camera.read()
        if not ret or frame_skip % 2 != 0:
            continue

        frame_count += 1
        display_frame = frame.copy()
        
        # Optimized preprocessing
        img = cv2.resize(frame, (224, 224), interpolation=cv2.INTER_LINEAR)
        img_array = (img.astype(np.float32).reshape(1, 224, 224, 3) / 127.5) - 1

        # Model prediction
        predictions = model.predict(img_array, verbose=0)
        index = np.argmax(predictions)
        confidence = predictions[0][index]
        class_name = class_names[index]

        # High-confidence processing
        if confidence > 0.75:
            timestamp = datetime.now().strftime('%Y-%m-%d %H:%M:%S')
            
            # Buffered file writing
            detection_buffer.append([
                timestamp,
                frame_count,
                class_name,
                f"{int(confidence*100)}%",
                f"{frame.shape[1]}x{frame.shape[0]}"
            ])
            
            if len(detection_buffer) >= 3:  # Write every 3 detections
                with open(log_file, 'a') as f:
                    for entry in detection_buffer:
                        f.write(f"{entry[0]} - {entry[2]} ({entry[3]})\n")
                csv_writer.writerows(detection_buffer)
                detection_buffer = []

            # Visual feedback
            shape = sign_shapes.get(class_name.lower().split()[0], "rectangle")
            center = (frame.shape[1]//2, frame.shape[0]//2)
            size = min(frame.shape[:2])//3
            
            draw_shape(display_frame, shape, center, size)
            
            label = f"{class_name} {int(confidence*100)}%"
            (w, h), _ = cv2.getTextSize(label, cv2.FONT_HERSHEY_SIMPLEX, 0.7, 2)
            
            cv2.rectangle(display_frame,
                        (center[0]-w//2, center[1]-size-h-10),
                        (center[0]+w//2, center[1]-size-10),
                        (0, 255, 0), -1)
            
            cv2.putText(display_frame, label,
                       (center[0]-w//2, center[1]-size-15),
                       cv2.FONT_HERSHEY_SIMPLEX, 0.7, (0, 0, 0), 2)

            # Async voice alerts
            current_time = time.time()
            if current_time - last_alert_time > 3:
                alert_messages = {
                    "stop": "Warning! Stop sign detected",
                    "speed": f"Speed limit {class_name.split()[-1]}",
                    "yield": "Yield ahead",
                    "pedestrian": "Pedestrian crossing",
                    "no entry": "No entry prohibited"
                }
                
                alert_message = alert_messages.get(
                    class_name.lower().split()[0],
                    f"Traffic sign detected: {class_name}"
                )
                
                voice_queue.put(alert_message)
                last_alert_time = current_time

        # Display
        cv2.imshow("Traffic Sign Detection", display_frame)
        
        # Exit on ESC
        if cv2.waitKey(1) == 27:
            break

finally:
    # Cleanup
    camera.release()
    cv2.destroyAllWindows()
    csv_file_handle.close()
    
    # Write any remaining detections
    if detection_buffer:
        with open(log_file, 'a') as f:
            for entry in detection_buffer:
                f.write(f"{entry[0]} - {entry[2]} ({entry[3]})\n")
        csv_writer.writerows(detection_buffer)
    
    print(f"\nDetection results saved to:\n- {log_file}\n- {csv_file}")